// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  email String @unique
  password String
  phone String @unique
  role UserEnum

  address String
  reviewAndRatings PackageReviewAndRating[]
  BookedPackage BookedPackage[]
  bookedSoloRoom BookedSoloRoom[]
  soloReviewAndRating SoloReviewAndRating[]
  addToCartPackage AddToCartPackage[]

  

  @@map("user")
}

enum UserEnum {
  super_admin
  admin
  host
  user 
  
}


model Package {
  id String @id @default(uuid())
  title String
  description String
  price Int
  from String
  to String
  maxUser Int
  packageImage String?
  destination String

  packageReviewAndRating PackageReviewAndRating[]
  bookedPackage BookedPackage[]
  addToCartPackage AddToCartPackage[]


  @@map("package")
}

model BookedPackage {
  id String @id @default(uuid())

  
  userId String
  user User @relation(fields: [userId], references: [id])
  packageId String
  package Package @relation(fields: [packageId], references:[id])

  @@map("bookedPackage")
}

model SoloRoom {
  id String @id @default(uuid())
  title String
  description String
  price Float
  numberOfRooms Int
  roomImage String?
  district String
  division String
  village String
  address String
  roadNumber String?
  status SoloRoomEnum
  BookedSoloRoom BookedSoloRoom[]
  soloReviewAndRating SoloReviewAndRating[]


  @@map("soloRoom")
}

model BookedSoloRoom {
  id String @id @default(uuid())
  Form String
  to String
  
  userId String
  user User @relation(fields: [userId], references: [id])
  soloRoomId String
  soloRoom SoloRoom @relation(fields: [soloRoomId], references:[id])

@@map("bookedSoloRoom")
}

enum SoloRoomEnum {
  available
  unavailable
}


model PackageReviewAndRating {
  id String @id @default(uuid())
  review String
  rating String
  userId String
  user User @relation(fields: [userId], references: [id])
  packageId String
  package Package @relation(fields: [packageId], references: [id])


  @@map("packageReviewAndRating")
}

model SoloReviewAndRating {
  id String @id @default(uuid())
  review String
  rating String
  userId String
  user User @relation(fields: [userId], references: [id])
  soloRoomId String
  soloRoom SoloRoom @relation(fields: [soloRoomId], references: [id])


  @@map("soloReviewAndRating")
}


model Faq {
   id String @id @default(uuid())
  title String
  description String

  @@map("faq")
}

model Blog {
   id String @id @default(uuid())
  title String
  description String

  @@map("blog")
}


model AddToCartPackage {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  packageId String
  package Package @relation(fields: [packageId], references: [id])

  @@map("addToCartPackage")
}
