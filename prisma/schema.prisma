// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  email String @unique
  password String
  phone String @unique
  role UserEnum
  contactNo String
  district String
  division String
  village String
  address String
  profileImg String
  reviewAndRatings PackageReviewAndRating[]
  BookedPackage BookedPackage[]
  bookedSoloRoom BookedSoloRoom[]
  soloReviewAndRating SoloReviewAndRating[]

  

  @@map("user")
}

enum UserEnum {
  super_admin
  admin
  customer 
  host
}

model PackageCategory {
  id String @id @default(uuid())
  title String
  books Package[]

  @@map("category")
}

model Package {
  id String @id @default(uuid())
  title String
  descripton String
  price Float
  from DateTime
  to DateTime
  status PackageStatusEnum
  image Json[]
  maxUser Int
  packageCategoryId String
  category PackageCategory @relation(fields: [packageCategoryId], references: [id])
  packageReviewAndRating PackageReviewAndRating[]
  bookedPackage BookedPackage[]


  @@map("package")
}

model BookedPackage {
  id String @id @default(uuid())
  Form DateTime
  to DateTime
  
  userId String
  user User @relation(fields: [userId], references: [id])
  soloRoomId String
  package Package @relation(fields: [soloRoomId], references:[id])
}

model SoloRoom {
  id String @id @default(uuid())
  title String
  descripton String
  price Float
  numberOfRooms Int
  image Json[]
  district String
  division String
  village String
  address String
  roadNumber String?
  status SoloRoomEnum
  BookedSoloRoom BookedSoloRoom[]
  soloReviewAndRating SoloReviewAndRating[]


  @@map("soloRoom")
}

model BookedSoloRoom {
  id String @id @default(uuid())
  Form DateTime
  to DateTime
  
  userId String
  user User @relation(fields: [userId], references: [id])
  soloRoomId String
  soloRoom SoloRoom @relation(fields: [soloRoomId], references:[id])

}

enum SoloRoomEnum {
  available
  unavailable
}


model PackageReviewAndRating {
  id String @id @default(uuid())
  review String
  rating String
  userId String
  user User @relation(fields: [userId], references: [id])
  packageId String
  package Package @relation(fields: [packageId], references: [id])


  @@map("packageReviewAndRating")
}

model SoloReviewAndRating {
  id String @id @default(uuid())
  review String
  rating String
  userId String
  user User @relation(fields: [userId], references: [id])
  soloRoomId String
  soloRoom SoloRoom @relation(fields: [soloRoomId], references: [id])


  @@map("soloReviewAndRating")
}

enum PackageStatusEnum {
  inprogress
  ongoing
  ended
  
}